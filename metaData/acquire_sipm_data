#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from petsys import daqd, config, fe_temperature, meta
from copy import deepcopy
import pandas
import os
import argparse
import math
import time

parser = argparse.ArgumentParser(description='Acquire data for TDC calibration')
parser.add_argument("--config", type=str, required=True, help="Configuration file")
parser.add_argument("-o", type=str, dest="fileNamePrefix", required=True, help = "Data filename (prefix)")
parser.add_argument("--time", type=float, required=True, help="Acquisition time (in seconds)")
parser.add_argument("--mode", type=str, required=True, choices=["tot", "qdc", "mixed"], help = "Acquisition mode (tot, qdc or mixed)")
parser.add_argument("--enable-hw-trigger", dest="hwTrigger", action="store_true", help="Enable the hardware coincidence filter")
parser.add_argument("--param-table", type=str, dest="paramTable", help="Table containing the name and values of 1 or 2 parameters to be scanned during data acquisition. Allowed parameters are: OV (SIPM Overvoltage), vth_t1 (t1 discriminator threshold, in DAC units relative to the channel baseline), vth_t2 (t2 discriminator threshold, in DAC units relative to the channel baseline), vth_e (e discriminator threshold, in DAC units relative to the channel baseline), disc_lsb_t1 (t1 discriminator DAC LSB)")
parser.add_argument("--run", type=float, help="Run number")

args = parser.parse_args()

validParams = ["OV","vth_t1","vth_t2","vth_e","disc_lsb_t1"]
parNames = []

if args.paramTable is not None:
        if not os.path.exists(args.paramTable):
                print("Error: no such file - %s" % args.paramTable)
                exit(1)
        table = pandas.read_table(args.paramTable)
        parNames = list(table)
        for name in parNames:
                if name not in validParams:
                        print(("Error: Invalid parameter - %s" % name))
                        exit(1)
                        
        step1Values = list(table[parNames[0]])
        if len(parNames) == 2:
                step2Values = list(table[parNames[1]])
        elif len(parNames) == 1:
                step2Values = [0]
                parNames.append("none")
        else:
                print("Error: only two parameters can be scanned at the same time") 
                exit(1)
 
    
mask = config.LOAD_ALL
if args.mode != "mixed":
        mask ^= config.LOAD_QDCMODE_MAP
systemConfig = config.ConfigFromFile(args.config, loadMask=mask)

daqd = daqd.Connection()
daqd.initializeSystem()
systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_ON, hw_trigger_enable=args.hwTrigger, qdc_mode = args.mode)

daqd.openRawAcquisition(args.fileNamePrefix)


activeAsics = daqd.getActiveAsics()
activeChannels = [ (portID, slaveID, chipID, channelID) for channelID in range(64) for portID, slaveID, chipID in activeAsics ]

asicsConfig = daqd.getAsicsConfig()

#### ADDED BY WILF; JUNE 2022 ####

# save metadata to json file
# initiate instance of Data class to store metadata
metadata = meta.Data()
# read in class attributes from arguments and global scope
metadata.run = args.run
metadata.start_time = time.asctime()
metadata.run_time = args.time
metadata.mode = args.mode
metadata.hwTrigger = args.hwTrigger
metadata.scan_parameters = args.paramTable
if len(parNames) > 0:
    metadata.step1par = parNames[0]
    metadata.step2par = parNames[1]
# get disc thresholds
dummyChannel = activeAsics[0] + (0,)
metadata.vth_t1, metadata.vth_t2, metadata.vth_e = systemConfig.getAsicChannelDefaultThresholds(dummyChannel)
# get list of temp sensors
sensor_list = fe_temperature.get_sensor_list(daqd)
# read temp sensors
for sensor in sensor_list:
    portID, slaveID, moduleID, subModuleID, kind = sensor.get_location()
    location = str(portID)+"_"+str(moduleID)+"_"+str(subModuleID)+"_"+kind
    metadata.start_temp[location] = sensor.get_temperature()
# use daq connection to read bias settings
biasConfig = daqd.get_hvdac_config()
dummy = daqd.getActiveBiasChannels()[0]
offs, preBDV, metadata.BDV, metadata.OV = systemConfig.getBiasChannelDefaultSettings(dummy)
# use class function to find remaining metadata in config file
metadata.findMeta(args.config)
metadata.saveMeta(args.fileNamePrefix)
print("Python: saved metadata to "+args.fileNamePrefix+".json")

##################################
if args.paramTable is None:
        daqd.acquire(args.time, 0, 0)
else:
    #########
        for step2 in step2Values:
                step2 = float(step2)
                if math.isnan(step2):
                        continue 
                metadata.data["step2"].append(step2) 
    ########
        for step1 in step1Values:
                step1 = float(step1)
                if math.isnan(step1):
                        continue 
                metadata.data["step1"].append(step1) #######
                if parNames[0] in ['vth_t1', 'vth_t2', 'vth_e']:
                        for portID, slaveID, chipID, channelID in activeChannels:
                                cc = asicsConfig[(portID, slaveID, chipID)].channelConfig[channelID]
                                dac_setting = systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), parNames[0], int(step1))
                                cc.setValue(parNames[0], dac_setting)
                elif parNames[0] in ['disc_lsb_t1']:
                        for portID, slaveID, chipID in activeAsics:
                                cc = asicsConfig[(portID, slaveID, chipID)].globalConfig
                                cc.setValue(parNames[0], int(step1))
                elif parNames[0] in ['OV']:
                        biasVoltageConfig = daqd.get_hvdac_config()
                        for key in daqd.getActiveBiasChannels():
                                offset, prebd, bd, over__ = systemConfig.getBiasChannelDefaultSettings(key)
                                vset = offset + bd + step1
                                dac_setting = systemConfig.mapBiasChannelVoltageToDAC(key, vset)
                                biasVoltageConfig[key] = dac_setting
                                daqd.set_hvdac_config(biasVoltageConfig)
                daqd.setAsicsConfig(asicsConfig)       
              
                for step2 in step2Values:
                        step2 = float(step2)
                        if math.isnan(step2):
                                continue 
                        if parNames[1] in ['vth_t1', 'vth_t2', 'vth_e']:
                                for portID, slaveID, chipID, channelID in activeChannels:
                                        cc = asicsConfig[(portID, slaveID, chipID)].channelConfig[channelID]
                                        dac_setting = systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), parNames[1], int(step2))
                                        cc.setValue(parNames[1], dac_setting)
                        elif parNames[1] in ['disc_lsb_t1']:
                                for portID, slaveID, chipID in activeAsics:
                                        cc = asicsConfig[(portID, slaveID, chipID)].globalConfig
                                        cc.setValue(parNames[1], int(step2))
                        elif parNames[1] in ['OV']:
                                #step2 = step2_
                                biasVoltageConfig = daqd.get_hvdac_config()
                                for key in daqd.getActiveBiasChannels():
                                        offset, prebd, bd, over__ = systemConfig.getBiasChannelDefaultSettings(key)
                                        vset = offset + bd + step2
                                        dac_setting = systemConfig.mapBiasChannelVoltageToDAC(key, vset)
                                        biasVoltageConfig[key] = dac_setting
                                daqd.set_hvdac_config(biasVoltageConfig)
                
                        if parNames[1] == "none":
                                print("Python:: Acquiring data for: " + parNames[0] + " = " + str(step1)) 
                        else:
                                print("Python:: Acquiring data for: " + parNames[0] + " = " + str(step1) + " ; " + parNames[1] + " = " + str(step2))  
                        daqd.setAsicsConfig(asicsConfig)
                        daqd.acquire(args.time, float(step1), float(step2))   
                    


systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_OFF)

#### ADDED BY WILF; JUNE 2022 ####
# read temp sensors
for sensor in sensor_list:
    portID, slaveID, moduleID, subModuleID, kind = sensor.get_location()
    location = str(portID)+"_"+str(moduleID)+"_"+str(subModuleID)+"_"+kind
    metadata.end_temp[location] = sensor.get_temperature()
metadata.end_time = time.asctime()
metadata.status = 'COMPLETE'
metadata.saveMeta(args.fileNamePrefix)
print("Python: saved metadata to "+args.fileNamePrefix+".json")
